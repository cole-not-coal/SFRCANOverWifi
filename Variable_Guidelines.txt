Good variable names allows all team members to more
intuitively understand code. This is especially important for SFR as the 
person who actually wrote the code may have graduated. It also just generally
saves time and headache. Sticking to a consistent style can allow programmers
to find what they are looking for even if they do not know the variable name.
eg. If you are looking for engine rpm doing a search for 'nEngine' will return
a decent result. 

Variable names should be fully descriptive. It should be possible to
understand 3 things from a variable name alone with no extra context.

1) What part of the car the variable relates to ie: Radiator
2) What is the physical property of the variable ie: Length
3) What is the unit. SI unit will be assumed but if the variable is not
in SI then it should be in the variable name.

Abbreviations of common physical properties. If the property you desire is
not on the list feel free to come up with your own. There are repeats, these
properties are generally unlikely to be confused with each other and using
an alternative letter would add more confusion then it would eleviate.
a: Area (m^2)
a: Angle (deg)
A: Current (A)
B: Boolean (no unit)
c: conductivity (unit varies)
r: ratio (no unit)
n: rotational velocity (rpm)
N: Unitless number
f: Frequency (Hz)
F: Force (N)
P: Power (W)
m: Mass (kg)
v: Voltage (V)
V: Volume (m^3)
t: Time (s)
T: Temperature (degC)
d: Distance (m)
D: density (kg/m^3)
p: Pressure (Pa)
E: Energy (J)
Q: Electrical charge (Coulomb)
F: Electrical capacitance (Farad)
R: Electrical resistance (Ohm)
s: Electrical conductance (Siemens)

Variable names should be in the format outlined below. 
physical property | Part of car | Descriptor | unit (if not SI)
d                 | Rad         | Width      | 

This gives us dRadWidth here the d indicates distance which has the SI
unit meters. 
Since this variable is in SI units we do not include the unit in the name.
The short descriptor tells us that it is the depth of the radiator.
We have achieved all 3 goals in a fairly short name. Yay! 

Sometimes short neat names are not possible but it is better to have a long
name that hits all 3 goals then a shorter one that does not. IDEs are very
good at autocompleting variables so it is often not added time to have a 
long name. What does however waste time is when someone who is not you needs
to try and understand what VRear refers to. Much better to just have
VRWSecondElement so we know its the volume of the rear wings second element
immediately.

Notes for c programming:
SFR uses a few custom data types when coding in c. Firstly TRUE and FALSE are defined.
Boolean - 1bit an int under the hood.
byte - 8bits a char under the hood.
word - 16bits a short under the hood.
dowrd - 32bits a long.
qword - 64 bits a long long.

byte, word, dword, qword have signed variants as well (sbyte, sword, sdword and sqword)
Using these data types saves memory allocation.

Variable names in c should have the data type as a prefix in addition to the standard 
variable name. Sometimes a variable is abstract and does not fit into a physical property,
in these cases the physical property prefix can be dropped. This is often the case with 
structures.

Standard prefixes:
byte		:b
sbyte		:sb
word		:w
sword		:sw
dword		:dw
sdword		:sdw
qword		:qw
sqword		:sqw
float		:f
structure	:st

Definitions should be all capital and use underscores between words eg: #define MY_DEFINITION_1 1
Function names should be simple and use underscores between words eg: my_function_1
Acronyms in function names may be capitalised eg: CAN, GPIO, etc
Magic numbers are not allowed. Use definitions for all required numbers.

Written by CP for SFR 2025